//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
using Bright.Serialization;
using System.Collections.Generic;

namespace ET
{
   
[Config]
public partial class StartMachineConfigCategory: Singleton<StartMachineConfigCategory>,IMerge
{
    private Dictionary<int, StartMachineConfig> _dataMap;
    private List<StartMachineConfig> _dataList;

    public StartMachineConfigCategory(ByteBuf _buf)
    {
        _dataMap = new Dictionary<int, StartMachineConfig>();
        _dataList = new List<StartMachineConfig>();
        
        for(int n = _buf.ReadSize() ; n > 0 ; --n)
        {
            StartMachineConfig _v;
            _v = StartMachineConfig.DeserializeStartMachineConfig(_buf);
            _dataList.Add(_v);
            _dataMap.Add(_v.Id, _v);
        }
    }
    
    public bool Contain(int id)
    {
        return _dataMap.ContainsKey(id);
    }

    public Dictionary<int, StartMachineConfig> GetAll()
    {
        return _dataMap;
    }
    
    public List<StartMachineConfig> DataList => _dataList;

    public void Merge(object o)
    {
        StartMachineConfigCategory s = o as StartMachineConfigCategory;
        foreach (var kv in s._dataMap)
        {
            this._dataMap.Add(kv.Key, kv.Value);
        }
    }

    public StartMachineConfig GetOrDefault(int key) => _dataMap.TryGetValue(key, out var v) ? v : null;
    public StartMachineConfig Get(int key) => _dataMap[key];
    public StartMachineConfig this[int key] => _dataMap[key];

    
    public string ConfigName()
    {
        return typeof(StartMachineConfig).Name;
    }
}
}