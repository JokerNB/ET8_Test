
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using Luban;

namespace ET
{
    [EnableClass]
    public sealed partial class CastConfig : BeanBase
    {
        public CastConfig(ByteBuf _buf)
        {
            Id = _buf.ReadInt();
            TotalTime = _buf.ReadInt();
            SelectType = _buf.ReadInt();
            {int __n0 = System.Math.Min(_buf.ReadSize(), _buf.Size);SelectParam = new string[__n0];for(var __index0 = 0 ; __index0 < __n0 ; __index0++) { string __e0;__e0 = _buf.ReadString(); SelectParam[__index0] = __e0;}}
            NoticeClientType = (NoticeClientType)_buf.ReadInt();
            {int __n0 = System.Math.Min(_buf.ReadSize(), _buf.Size);HitAction = new int[__n0];for(var __index0 = 0 ; __index0 < __n0 ; __index0++) { int __e0;__e0 = _buf.ReadInt(); HitAction[__index0] = __e0;}}
            {int __n0 = System.Math.Min(_buf.ReadSize(), _buf.Size);HitActionTimes = new int[__n0];for(var __index0 = 0 ; __index0 < __n0 ; __index0++) { int __e0;__e0 = _buf.ReadInt(); HitActionTimes[__index0] = __e0;}}
            {int __n0 = System.Math.Min(_buf.ReadSize(), _buf.Size);SelfHitAction = new int[__n0];for(var __index0 = 0 ; __index0 < __n0 ; __index0++) { int __e0;__e0 = _buf.ReadInt(); SelfHitAction[__index0] = __e0;}}
            {int __n0 = System.Math.Min(_buf.ReadSize(), _buf.Size);SelfHitActionTimes = new int[__n0];for(var __index0 = 0 ; __index0 < __n0 ; __index0++) { int __e0;__e0 = _buf.ReadInt(); SelfHitActionTimes[__index0] = __e0;}}
            {int __n0 = System.Math.Min(_buf.ReadSize(), _buf.Size);Buffs = new int[__n0];for(var __index0 = 0 ; __index0 < __n0 ; __index0++) { int __e0;__e0 = _buf.ReadInt(); Buffs[__index0] = __e0;}}
            {int __n0 = System.Math.Min(_buf.ReadSize(), _buf.Size);SelfBuffs = new int[__n0];for(var __index0 = 0 ; __index0 < __n0 ; __index0++) { int __e0;__e0 = _buf.ReadInt(); SelfBuffs[__index0] = __e0;}}
            {int __n0 = System.Math.Min(_buf.ReadSize(), _buf.Size);StartEffect = new int[__n0];for(var __index0 = 0 ; __index0 < __n0 ; __index0++) { int __e0;__e0 = _buf.ReadInt(); StartEffect[__index0] = __e0;}}
            {int __n0 = System.Math.Min(_buf.ReadSize(), _buf.Size);HitEffect = new int[__n0];for(var __index0 = 0 ; __index0 < __n0 ; __index0++) { int __e0;__e0 = _buf.ReadInt(); HitEffect[__index0] = __e0;}}
            StartAnimation = _buf.ReadInt();
            HitAnimation = _buf.ReadInt();

            PostInit();
        }

        public static CastConfig DeserializeCastConfig(ByteBuf _buf)
        {
            return new CastConfig(_buf);
        }

        /// <summary>
        /// Id
        /// </summary>
        public readonly int Id;

        /// <summary>
        /// 总时长
        /// </summary>
        public readonly int TotalTime;

        /// <summary>
        /// 目标选择方式
        /// </summary>
        public readonly int SelectType;

        /// <summary>
        /// 目标选择参数
        /// </summary>
        public readonly string[] SelectParam;

        /// <summary>
        /// 通知客户端类型
        /// </summary>
        public readonly NoticeClientType NoticeClientType;

        /// <summary>
        /// 命中行为
        /// </summary>
        public readonly int[] HitAction;

        /// <summary>
        /// 技能命中目标时间点
        /// </summary>
        public readonly int[] HitActionTimes;

        /// <summary>
        /// 命中自身行为
        /// </summary>
        public readonly int[] SelfHitAction;

        /// <summary>
        /// 技能命中自身时间点
        /// </summary>
        public readonly int[] SelfHitActionTimes;

        /// <summary>
        /// 命中Buff
        /// </summary>
        public readonly int[] Buffs;

        /// <summary>
        /// 命中自身Buff
        /// </summary>
        public readonly int[] SelfBuffs;

        /// <summary>
        /// 技能开始时的自身特效
        /// </summary>
        public readonly int[] StartEffect;

        /// <summary>
        /// 技能命中时的目标特效
        /// </summary>
        public readonly int[] HitEffect;

        /// <summary>
        /// 起手动画
        /// </summary>
        public readonly int StartAnimation;

        /// <summary>
        /// 命中动画
        /// </summary>
        public readonly int HitAnimation;

        public const int __ID__ = 944053121;

        public override int GetTypeId() => __ID__;

        public override string ToString()
        {
            return "{ "
            + "Id:" + Id + ","
            + "TotalTime:" + TotalTime + ","
            + "SelectType:" + SelectType + ","
            + "SelectParam:" + Luban.StringUtil.CollectionToString(SelectParam) + ","
            + "NoticeClientType:" + NoticeClientType + ","
            + "HitAction:" + Luban.StringUtil.CollectionToString(HitAction) + ","
            + "HitActionTimes:" + Luban.StringUtil.CollectionToString(HitActionTimes) + ","
            + "SelfHitAction:" + Luban.StringUtil.CollectionToString(SelfHitAction) + ","
            + "SelfHitActionTimes:" + Luban.StringUtil.CollectionToString(SelfHitActionTimes) + ","
            + "Buffs:" + Luban.StringUtil.CollectionToString(Buffs) + ","
            + "SelfBuffs:" + Luban.StringUtil.CollectionToString(SelfBuffs) + ","
            + "StartEffect:" + Luban.StringUtil.CollectionToString(StartEffect) + ","
            + "HitEffect:" + Luban.StringUtil.CollectionToString(HitEffect) + ","
            + "StartAnimation:" + StartAnimation + ","
            + "HitAnimation:" + HitAnimation + ","
            + "}";
        }

        partial void PostInit();
    }
}
